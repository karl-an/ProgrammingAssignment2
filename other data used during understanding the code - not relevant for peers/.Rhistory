makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
x=1
set <- function(y) {
x <<- y
m <<- NULL
}
makeVector(3)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(2)
cachemean(2, ...)
cachemean(2, 5)
function () x
get
google <- function() 1234
google(55)
google
google()
google(2)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVektor(3)
makeVector(3)
makeVector(5)
g <- makeVector(3)
h <- makeVector(4)
f <- makeVector(3)
g==f
g
h
f
g
2$get
x$get
f$get
cachemean(4)
cachemean(c(4,4)
)
cachemean(c(4,4))
?solve
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector
makeVector$set
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector2 <- makeVector(c(1,2,4))
makeVector
makeVector2
makeVector$set
makeVector2$set
makeVector2 <- makeVector(c(1,2,4))
cachemean(makeVector2)
cachemean(makeVector2)
makeVector2 <- makeVector(c(1,1,1))
makeVector12 <- makeVector(c(1,1,1))
a=1
b=2
f<-function(a,b)
{
return( function(x) {
a*x + b
})
}
g=f(2,1)
p=g(3)
h=f(2,44)
h(5)
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- makeVector(c(1,2,3))
z <- makeVector(c(1,2,3))
cachemean(z)
x$set(c(4,5,6))
x$get()
z$set(c(4,5,6))
z$get()
cachemean(z)
cachemean(z)
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
z <- makeVector(c(1,2,3))
z$get()
z$set(c(4,5,6))
z <- makeVector(c(1,2,3))
z$get()
z$set(c(4,5,6))
z$get()
cachemean(z)
z$setmean
z$getmean
z$setmean(4)
z$getmean
z$setmean(4)
z$getmean
z$set(c(4,5,6))
z$get()
z$setmean(4)
z$getmean
cachemean(z)
cachemean(z)
z$getmean
z$getmean(m)
z$getmean()
z$setmean(4)
z$getmean()
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
z$setmean(4)
z <- makeVector(c(1,2,3))
z$setmean(4)
z$getmean()
z <- makeVector(c(1,2,3))
cachemean(z)
z$get()
z$getmean()
z$setmean(4)
z$getmean()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
get <- function() x
setinverse <- function(inverse) {
inv <<- inverse
}
getinverse <- function() inv
list(get=get, setinverse=setinverse, getinverse=getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)){
message("getting cached data")
return(inv)
}
data <- x$get()
inv  <- solve(data, ...)
x$setinverse(inv)
inv
## Return a matrix that is the inverse of 'x'
}
size <- 1000 # size of the matrix edge, don't make this too big
mymatrix <- matrix(rnorm(size^2), nrow=size, ncol=size)
mymatrix.inverse <- solve(mymatrix)
#
# now solve the matrix via the cache-method
#
special.matrix   <- makeCacheMatrix(mymatrix)
#
# this should take long, since it's the first go
special.solved.1 <- cacheSolve(special.matrix)
#
# this should be lightning fast
special.solved.2 <- cacheSolve(special.matrix)
#
# check if all solved matrices are identical
identical(mymatrix.inverse, special.solved.1) & identical(mymatrix.inverse, special.solved.2)
#
# should return TRUE
x <- matrix(1:4, 2, 2)  # x is test 2*2 square matrix
z <- solve(x)   # showing that function solve works .....
z
x %*% z
xx <- makeCacheMatrix(x)
xxx <- cacheSolve(xx)
xxx <- cacheSolve(xx)
xxx <- cacheSolve(xx)
xxx
xxx
x
xx
xxx
cacheSolve(xxx)
cacheSolve(xx)
x*xxx
x
xxx
xxx*x
x
z
x*z
x%*%z
x%*%xxx
